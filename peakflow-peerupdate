#!/usr/bin/python

import logging
import re
import sys

from pypeakflow.peakflow_soap import ConnectionOptions, PeakflowSOAP
from pypeakflow.mo import ManagedObject, MoMatchPeerAs
from pypeakflow.auto_config import InterfaceRule

class Peer:
    def __init__(self):
        pass


if __name__ == '__main__':
    logger = logging.getLogger()
    log_stream = logging.StreamHandler()
    log_stream.setFormatter(logging.Formatter("%(asctime)s: %(levelname)-8s %(message)s"))
    logger.setLevel(logging.INFO)
    logger.addHandler(log_stream)

    import optparse

    parser = optparse.OptionParser()
    parser.add_option("-H", "--host", help="host for SOAP API connection, typically the leader")
    parser.add_option("-U", "--username", help="username for SOAP API connection")
    parser.add_option("-P", "--password", help="password for SOAP API connection")
    parser.add_option("--from-file", help="add peers as defined in file")
    parser.add_option("--list", action="store_true", help="list configured peers")
    parser.add_option("--add", action="store_true", help="add new peer")
    parser.add_option("--asn", help="set peer ASN")
    parser.add_option("--name", help="set peer name")
    parser.add_option("--description", help="set peer description")
    parser.add_option("--precedence", help="insert rules starting with precedence")
    parser.add_option("--interface-desc-re", help="interface description regexp")
    parser.add_option("--commit", action="store_true", help="commit configuration")
    (options, args) = parser.parse_args()

    co = ConnectionOptions(options.host, options.username, options.password)

    if options.from_file:
        f = open(options.from_file)
        peers = {}
        for line in f.readlines():
            (asn, name) = re.split('\s+', line.strip(), 1)
            peers[int(asn)] = {
                    'name': name
                    }
        f.close()

        for asn in sorted(peers, reverse=True):
            name = peers[asn]['name']

            mo = ManagedObject()
            mo.co = co
            mo.family = 'peer'
            mo.name = "AS%s %s" % (asn, name)
            mo.description = "Peer %s [%s]" % (name, asn)
            mo.match = MoMatchPeerAs()
            mo.match.peer_as = asn
            mo.save()

            interface_desc_re = options.interface_desc_re % { 'asn': asn }

            ir = InterfaceRule()
            ir.co = co
            ir.precedence = options.precedence
            ir.name = "PNI AS%s" % asn
            ir.description = "Auto-generated rule for peer AS%s" % asn
            ir.action_type = True
            ir.action_set_type = 'external'
            ir.action_asns = True
            ir.action_set_asn = asn
            ir.action_set_mo = True
            ir.action_set_mo_type = 'simple'
            ir.action_set_mos.append(mo.name)
            ir.match_intf_desc_regex = interface_desc_re
            ir.save()
            f.close()



    if options.list:
        mos = {}
        for mo in ManagedObject.from_peakflow(co):
            if mo.family == 'peer':
                mos[mo.name] = mo

        for name in sorted(mos):
            mo = mos[name]
            print mo.name

    if options.add:
        mo = ManagedObject()
        mo.co = co
        mo.family = 'peer'
        mo.name = options.name
        mo.description = options.description
        mo.match = MoMatchPeerAs()
        mo.match.peer_as = options.asn
        mo.save()

        interface_desc_re = options.interface_desc_re % { 'asn': options.asn }

        ir = InterfaceRule()
        ir.co = co
        ir.precedence = options.precedence
        ir.name = "PNI AS%s" % options.asn
        ir.description = "Auto-generated rule for peer AS%s" % options.asn
        ir.action_type = True
        ir.action_set_type = 'external'
        ir.action_asns = True
        ir.action_set_asn = options.asn
        ir.action_set_mo = True
        ir.action_set_mo_type = 'simple'
        ir.action_set_mos.append(options.name)
        ir.match_intf_desc_regex = interface_desc_re
        ir.save()

    if options.commit:
        pf = PeakflowSOAP(co)
        pf.commit()
