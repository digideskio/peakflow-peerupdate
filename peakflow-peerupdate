#!/usr/bin/python

import logging
import sys

from pypeakflow.peakflow_soap import ConnectionOptions, PeakflowSOAP
from pypeakflow.mo import ManagedObject, MoMatchPeerAs

class Peer:
    def __init__(self):
        pass


if __name__ == '__main__':
    logger = logging.getLogger()
    log_stream = logging.StreamHandler()
    log_stream.setFormatter(logging.Formatter("%(asctime)s: %(levelname)-8s %(message)s"))
    logger.setLevel(logging.INFO)
    logger.addHandler(log_stream)

    import optparse

    parser = optparse.OptionParser()
    parser.add_option("-H", "--host", help="host for SOAP API connection, typically the leader")
    parser.add_option("-U", "--username", help="username for SOAP API connection")
    parser.add_option("-P", "--password", help="password for SOAP API connection")
    parser.add_option("--list", action="store_true", help="list configured peers")
    parser.add_option("--add", action="store_true", help="add new peer")
    parser.add_option("--asn", help="set peer ASN")
    parser.add_option("--name", help="set peer name")
    parser.add_option("--description", help="set peer description")
    parser.add_option("--commit", action="store_true", help="commit configuration")
    (options, args) = parser.parse_args()

    co = ConnectionOptions(options.host, options.username, options.password)

    if options.list:
        mos = {}
        for mo in ManagedObject.from_peakflow(co):
            if mo.family == 'peer':
                mos[mo.name] = mo

        for name in sorted(mos):
            mo = mos[name]
            print mo.name

    if options.add:
        mo = ManagedObject()
        mo.co = co
        mo.family = 'peer'
        mo.name = options.name
        mo.description = options.description
        mo.match = MoMatchPeerAs()
        mo.match.peer_as = options.asn
        mo.save()

    if options.commit:
        pf = PeakflowSOAP(co)
        pf.commit()
